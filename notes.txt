

Routes in laravel

    simple Routing
        The / will automatically identify the files inside resources/views Folder.

        Ex:-
            Route::any('/program_1/post', function () {
                return view('welcome');
            });
    
        OR create direct view route 
                Route::view('/path', 'viewFileName');


    Dynamic Routing

        Ex :- 
            Route::get('student/{id}', function ($id) { 
                echo "Student " . $id;
            });

    FallBack Route(Invalid Route)
        calles when the route is not found.

        Ex:- 
            Route::fallback(function () {
                return "please enter valid url";
            });
            
            
Pass data from route to view 

    send data :-

        using compact, 
            Route::get('/', function () {
                $data = "Data from web.php file";               
                return view('test', compact('data'));               // compact only allows variables
            });

        OR 

        using with function,
            Route::get('/', function () {
                $data = "Data from web.php file";               
                return view('test')->with('data',$data);               
            });

        OR 

        using key value array data,
            Route::get('/', function () {   
                return view('test',['key'=>value,'key'=>value]);               
            });


    Recive Data :-

        in target .php file 
            {{ $variable_name }}                               // to access variable 
            {{ request()->parameter_Name }}                               // to access url variable 


Create view file terminal
    Command :- php artisan make:view contactUs                      // It will automatically creates contactUs.blade.php file under views Folder



Looping in blade file
    the loop starts with @for and ends with @endfor

    Ex:-
        @for($i=0;$i<10;$i++)
            <p> {{$i}} </p>                     // It doesn't require {} brackets
        @endfor

Blade Templates:-

    Condition in blade file
        the Condition statements start with @  and ends with @endfor

        Ex:-
            @if($i<0)
                <p> {{$i}} is Less then 0</p>
            @else
                <p> {{$i}} is Greater then 0</p>
            @endif

    For More Templates https://laravel.com/docs/12.x/blade

Adding sub components/views

    @include('fileName')

    Ex:-
        @include('subViews.input')
        
    call subview with data passing
            @include('subViews.input',[
                'lableFor' => 'Name',
                'myName' => 'Umang'
            ])                              // assess those data from subview with {{ $variable_name}}



Terminal commands
    To get the all routes in terminal
        Command :- php artisan route:list

            it will return all the routes list with 2 other routes
            up : - to see our application is up,running or not.
            storage{path} :- later discuss.

    To store site in cache
        Command :- php artisan view:cache

            it will catch the site in catch memory for faster loading.

    To remove cache
        Command :- php artisan view:clear

Master Layout with @extends and @yield

    @extends:
        This directive tells Laravel to extend a layout.

        Example:

        @extends('layouts.app')


    @yield:
        Used in the layout to define a placeholder for content.

        Example:

        <title>@yield('title', 'My Laravel App')</title>


    @section:
        Defines content for a specific section that will be injected into the layout's @yield.

        Example:

        @section('title', 'Home Page')

        @section('content')
            <p>Welcome to the home page!</p>
        @endsection

    @show:
        Immediately displays the content of a section after it's been defined.

        Example:

        @section('header')
            <h2>Header Content</h2>
        @show


Controllers
    controllers are the main part of MVC.
    It can get data from view, process data and set back data to view.
    It has ability to get data from database/Model also.

    Create a controller 
        Mannylally inside App/Http/Controllers

        OR 
        
        using command : php artisan make:controller controller_name

    Ex :-
        class StudentController extends Controller
        {
            public function  index()
            {
                return "From Student Controller";
            }
        }

    route FOR controller
        Route::get('controller', [StudentController::class, 'index']);

    controller Route Group
        Route::controller(StudentController::class)->group(function () {
            Route::get('studentController', 'index');
            Route::get('aboutstudent', 'aboutStudent');
        });

    pass data to the controller
        Route::controller(StudentController::class)->group(function () {
            Route::get('studentController', 'index');
            Route::get('aboutstudent/{id}/{name}', 'aboutStudent');
        });


    Private Controllers
        Private controller can only access within the same class.

        private function  studentResult($id)
        {
            return "Student Id " . $id . " has 50 marks";
        }


    __construct() :-
        it automatically calles when object is created.
        whenever we need any calculation ,run any logic, or anything computation.

        Ex:-
            protected $status;                              // Global variable
            public function __construct()
            {
                $this->status = "fail";
            }

    Types of controllers
        1) Invokable controller 
        2) Resource controller

        1) Invokable controller
            it is also called single maod controller which means if any controller have only 1 function and we don't want to use like index,create,update,delete etc.
            it has only 1 method where we can put our logic which is __invoke function

            create command :-   php artisan make:controller controller_name --invokable

            Example file :-
                class invokableController extends Controller
                {
                    public function __invoke(Request $request)
                    {
                        return "Inside invokable controller";
                    }
                }
            
            route for invokableController
                Route::get('/invoke', InvokableController::class); // don't need to specify method automatically gets __invoke

        2) Resource Controller :-
            it has already predefined methods index, create, store, show, edit, update and destroy.

            create command :- php artisan make:controller controller_name --resource

            Route::resource('/resource', ResourceController::class);        // To call resource controller

    Migration in Laravel
        Migrations are version control for out database similar like gate which is version control for our code 

        we track our changes over time and that database table it allows us to define table structures and update them over time using php code instade of writing row SQL query and creating tables or changing them Mannylally.

        the migrations are showm inside database/migrations Folder
        command :- 
            php artisan migrate // for check all required tables are awailable or not
            php artisan make:migration StudentTable         // creates migration file

        The migration file has by default 2 methods up() and down()

        up() - it is used for creating table structures
        down() - to reverse migration

        to create migration table with command
             php artisan make:migration create_tablename_table
        
        it has by default this methods 
            public function up(): void
            {
                Schema::create('students', function (Blueprint $table) {
                    $table->id();                       // columns
                    $table->timestamps();
                });
            }

            /**
            * Reverse the migrations.
            */
            public function down(): void
            {
                Schema::dropIfExists('students');
            }

        Example create student table 
            Schema::create('students', function (Blueprint $table) {
                $table->id();
                $table->string('studentName');
                $table->integer('age');
                $table->float('percentage');
                $table->timestamps();
            });

            it automatically adds 2 columns created_at and updated_at

    Modify migration
        php artisan make:migration updateMigrationName --table=table_name


        public function up(): void
        {
            Schema::table('students', function (Blueprint $table) {
                // insert new columns
                $table->date('date_of_birth')->nullable();
                $table->enum('gender', ['male', 'female'])->default('male');
            });
        }

        /**
        * Reverse the migrations.
        */
        public function down(): void
        {
            Schema::table('students', function (Blueprint $table) {
                // columns to be delete
            });
        }